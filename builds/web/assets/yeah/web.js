/* Generated by Opal 0.7.0.beta1 */
Opal.modules["math"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$===', '$raise', '$type_error', '$to_f', '$log', '$include']);
  return (function($base) {
    var self = $module($base, 'Math');

    var def = self.$$proto, $scope = self.$$scope, $a;

    (function($base, $super) {
      function $DomainError(){};
      var self = $DomainError = $klass($base, $super, 'DomainError', $DomainError);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      return ($opal.defs(self, '$new', TMP_1 = function(method) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        return $opal.find_super_dispatcher(self, 'new', TMP_1, null, $DomainError).apply(self, ["Numerical argument is out of domain - \"" + (method) + "\""]);
      }), nil) && 'new'
    })(self, $scope.get('StandardError'));

    $opal.cdecl($scope, 'E', Math.E);

    $opal.cdecl($scope, 'PI', Math.PI);

    def.$acos = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      x = x.$to_f();

      if (x < -1 || x > 1) {
        self.$raise($scope.get('DomainError'), "acos");
      }

      return Math.acos(x);
    ;
    };

    if ((($a = (typeof(Math.acosh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.acosh = function(x) {
        return Math.log(x + Math.sqrt(x * x - 1));
      }
    
    };

    def.$acosh = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.acosh(x.$to_f());
    ;
    };

    def.$asin = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      x = x.$to_f();

      if (x < -1 || x > 1) {
        self.$raise($scope.get('DomainError'), "asin");
      }

      return Math.asin(x);
    ;
    };

    if ((($a = (typeof(Math.asinh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(x * x + 1))
      }
    ;
    };

    def.$asinh = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.asinh(x.$to_f());
    ;
    };

    def.$atan = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.atan(x.$to_f());
    ;
    };

    def.$atan2 = function(x, y) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      if (!$scope.get('Numeric')['$==='](y)) {
        self.$raise($scope.get('Opal').$type_error(y, $scope.get('Float')));
      }

      return Math.atan2(x.$to_f(), y.$to_f());
    ;
    };

    if ((($a = (typeof(Math.atanh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.atanh = function(x) {
        return 0.5 * Math.log((1 + x) / (1 - x));
      }
    
    };

    def.$atanh = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      x = x.$to_f();

      if (x < -1 || x > 1) {
        self.$raise($scope.get('DomainError'), "atanh");
      }

      return Math.atanh(x);
    ;
    };

    def.$cbrt = function(x) {
      var self = this;

      return Math.cbrt(x);
    };

    def.$cos = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.cos(x.$to_f());
    ;
    };

    if ((($a = (typeof(Math.cosh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
      }
    
    };

    def.$cosh = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.cosh(x.$to_f());
    ;
    };

    def.$erf = function(x) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    };

    def.$erfc = function(x) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    };

    def.$exp = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.exp(x.$to_f());
    ;
    };

    def.$frexp = function(x) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    };

    def.$gamma = function(x) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    };

    if ((($a = (typeof(Math.hypot) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.hypot = function(x, y) {
        return Math.sqrt(x * x + y * y)
      }
    ;
    };

    def.$hypot = function(x, y) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      if (!$scope.get('Numeric')['$==='](y)) {
        self.$raise($scope.get('Opal').$type_error(y, $scope.get('Float')));
      }

      return Math.hypot(x.$to_f(), y.$to_f());
    ;
    };

    def.$ldexp = function(flt, int$) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    };

    def.$lgamma = function(x) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    };

    def.$log = function(num, base, method) {
      var $a, self = this;

      if (base == null) {
        base = $scope.get('E')
      }
      if (method == null) {
        method = nil
      }
      
      if (!$scope.get('Numeric')['$==='](num)) {
        self.$raise($scope.get('Opal').$type_error(num, $scope.get('Float')));
      }

      if (!$scope.get('Numeric')['$==='](base)) {
        self.$raise($scope.get('Opal').$type_error(base, $scope.get('Float')));
      }

      num  = num.$to_f();
      base = base.$to_f();

      if (num < 0) {
        self.$raise($scope.get('DomainError'), ((($a = method) !== false && $a !== nil) ? $a : "log"));
      }

      num = Math.log(num);

      if (base != Math.E) {
        num /= Math.log(base);
      }

      return num
    ;
    };

    if ((($a = (typeof(Math.log10) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      def.$log10 = function(num) {
        var self = this;

        
        if (!$scope.get('Numeric')['$==='](num)) {
          self.$raise($scope.get('Opal').$type_error(num, $scope.get('Float')));
        }

        num = num.$to_f();

        if (num < 0) {
          self.$raise($scope.get('DomainError'), "log2");
        }

        return Math.log10(num);
      ;
      }
      } else {
      def.$log10 = function(num) {
        var self = this;

        return self.$log(num, 10, "log10");
      }
    };

    if ((($a = (typeof(Math.log2) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      def.$log2 = function(num) {
        var self = this;

        
        if (!$scope.get('Numeric')['$==='](num)) {
          self.$raise($scope.get('Opal').$type_error(num, $scope.get('Float')));
        }

        num = num.$to_f();

        if (num < 0) {
          self.$raise($scope.get('DomainError'), "log2");
        }

        return Math.log2(num);
      ;
      }
      } else {
      def.$log2 = function(num) {
        var self = this;

        return self.$log(num, 2, "log2");
      }
    };

    def.$sin = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.sin(x.$to_f());
    ;
    };

    if ((($a = (typeof(Math.sinh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
      }
    
    };

    def.$sinh = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.sinh(x.$to_f());
    ;
    };

    def.$sqrt = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      x = x.$to_f();

      if (x < 0) {
        self.$raise($scope.get('DomainError'), "log2");
      }

      return Math.sqrt(x);
    ;
    };

    def.$tan = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.tan(x.$to_f());
    ;
    };

    if ((($a = (typeof(Math.tanh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.tanh = function(x) {
        if (x == Infinity) {
          return 1;
        }
        else if (x == -Infinity) {
          return -1;
        }
        else {
          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
        }
      }
    
    };

    def.$tanh = function(x) {
      var self = this;

      
      if (!$scope.get('Numeric')['$==='](x)) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')));
      }

      return Math.tanh(x.$to_f());
    ;
    };

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$include($scope.get('Math'))
    })(self.$singleton_class());
        ;$opal.donate(self, ["$acos", "$acosh", "$asin", "$asinh", "$atan", "$atan2", "$atanh", "$cbrt", "$cos", "$cosh", "$erf", "$erfc", "$exp", "$frexp", "$gamma", "$hypot", "$ldexp", "$lgamma", "$log", "$log10", "$log10", "$log2", "$log2", "$sin", "$sinh", "$sqrt", "$tan", "$tanh"]);
  })(self)
};

/* Generated by Opal 0.7.0.beta1 */
Opal.modules["yeah/web/constants"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs([]);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Web');

      var def = self.$$proto, $scope = self.$$scope;

      $opal.cdecl($scope, 'DEFAULT_CANVAS_SELECTOR', "canvas")
      
    })(self)
    
  })(self)
};

/* Generated by Opal 0.7.0.beta1 */
Opal.modules["yeah/web/class_methods"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs(['$new', '$nil?', '$title', '$preserve_pixels']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Web');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.$configure = TMP_1 = function() {
          var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil, config = nil;

          TMP_1.$$p = null;
          config = $scope.get('Struct').$new("title", "preserve_pixels").$new();
          if ($opal.$yield1(block, config) === $breaker) return $breaker.$v;
          if ((($a = config.$title()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            window.document.title = config.$title();
          };
          return PRESERVE_PIXELS = config.$preserve_pixels();
        }
                ;$opal.donate(self, ["$configure"]);
      })(self)
      
    })(self)
    
  })(self)
};

/* Generated by Opal 0.7.0.beta1 */
Opal.modules["yeah/web/asset"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$new', '$private']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Web');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Asset(){};
        var self = $Asset = $klass($base, $super, 'Asset', $Asset);

        var def = self.$$proto, $scope = self.$$scope;

        def.path = nil;
        $opal.cdecl($scope, 'ASSETS_PATH', "./assets");

        self.$attr_reader("path");

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          return (self.$$proto['$[]'] = function(args) {
            var $a, self = this;

            args = $slice.call(arguments, 0);
            return ($a = self).$new.apply($a, [].concat(args));
          }, nil) && '[]'
        })(self.$singleton_class());

        def.$initialize = function(path) {
          var self = this;

          return self.path = path;
        };

        self.$private();

        return (def.$full_path = function() {
          var self = this;

          return "" + ($scope.get('ASSETS_PATH')) + "/" + (self.path);
        }, nil) && 'full_path';
      })(self, null)
      
    })(self)
    
  })(self)
};

/* Generated by Opal 0.7.0.beta1 */
Opal.modules["yeah/web/image"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$full_path']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Web');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Image(){};
        var self = $Image = $klass($base, $super, 'Image', $Image);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def["native"] = nil;
        def.$initialize = TMP_1 = function(path) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          TMP_1.$$p = null;
          $opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
          
      self["native"] = new Image();
      self["native"].src = self.$full_path();
    ;
        };

        def.$width = function() {
          var self = this;

          return self["native"].width;
        };

        def.$height = function() {
          var self = this;

          return self["native"].height;
        };

        def.$size = function() {
          var self = this;

          return [self["native"].width, self["native"].height];
        };

        return (def.$to_n = function() {
          var self = this;

          return self["native"];
        }, nil) && 'to_n';
      })(self, $scope.get('Asset'))
      
    })(self)
    
  })(self)
};

/* Generated by Opal 0.7.0.beta1 */
Opal.modules["yeah/web/sound"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$full_path', '$<<', '$shift', '$each']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Web');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Sound(){};
        var self = $Sound = $klass($base, $super, 'Sound', $Sound);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.buffer = def.sources = nil;
        window.AudioContext = window.AudioContext || window.webkitAudioContext;

        $opal.cdecl($scope, 'CONTEXT', new AudioContext());

        def.$initialize = TMP_1 = function(path) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          TMP_1.$$p = null;
          $opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
          self.sources = [];
          
      var request = new XMLHttpRequest();
      request.open('GET', self.$full_path(), true);
      request.responseType = 'arraybuffer';

      request.onload = function() {
        $scope.get('CONTEXT').decodeAudioData(request.response, function(buffer) {
          self.buffer = buffer;
        });
      }

      request.send();
    ;
        };

        def.$play = function() {
          var $a, self = this;

          if ((($a = self.buffer) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          
      var source = $scope.get('CONTEXT').createBufferSource();
      source.buffer = self.buffer;
      source.connect($scope.get('CONTEXT').destination);

      self.sources['$<<'](source)

      source.onended = function() {
        self.sources.$shift()
      }

      source.start(0);
    ;
        };

        return (def.$stop = function() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self.sources).$each, $a.$$p = (TMP_2 = function(s){var self = TMP_2.$$s || this;
if (s == null) s = nil;
          try { s.stop(0) } catch(e) {};
            return nil;}, TMP_2.$$s = self, TMP_2), $a).call($b);
        }, nil) && 'stop';
      })(self, $scope.get('Asset'))
      
    })(self)
    
  })(self)
};

/* Generated by Opal 0.7.0.beta1 */
Opal.modules["yeah/web/font"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs([]);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Web');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Font(){};
        var self = $Font = $klass($base, $super, 'Font', $Font);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })(self, $scope.get('Asset'))
      
    })(self)
    
  })(self)
};

/* Generated by Opal 0.7.0.beta1 */
Opal.modules["yeah/web/display"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$attr_reader', '$fetch', '$text_font=', '$[]', '$text_size=', '$size=', '$nil?', '$path', '$to_hex', '$[]=', '$push', '$dup', '$pop', '$width', '$height', '$to_n', '$private']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Web');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Display(){};
        var self = $Display = $klass($base, $super, 'Display', $Display);

        var def = self.$$proto, $scope = self.$$scope;

        def.canvas = def.text_size = def.text_font = def.context = def.transform = def.transforms = def.width = def.height = nil;
        self.$attr_reader("text_font", "text_size");

        def.$initialize = function(options) {
          var $a, $b, self = this, canvas_selector = nil;

          if (options == null) {
            options = $hash2([], {})
          }
          canvas_selector = options.$fetch("canvas_selector", $scope.get('DEFAULT_CANVAS_SELECTOR'));
          self.canvas = document.querySelectorAll(canvas_selector)[0];
          self.context = self.canvas.getContext('2d');
          (($a = [$scope.get('Font')['$[]']("")]), $b = self, $b['$text_font='].apply($b, $a), $a[$a.length-1]);
          (($a = [$scope.get('DEFAULT_DISPLAY_TEXT_SIZE')]), $b = self, $b['$text_size='].apply($b, $a), $a[$a.length-1]);
          (($a = [options.$fetch("size", nil)]), $b = self, $b['$size='].apply($b, $a), $a[$a.length-1]);
          self.transform = [1, 0, 0, 1, 0, 0];
          self.transforms = [];
          return DISPLAY = self;
        };

        def.$width = function() {
          var self = this;

          return self.canvas.width;
        };

        def['$width='] = function(value) {
          var $a, self = this, font = nil;

          self.width = value;
          if ((($a = value['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.canvas.width = value;
          };
          font = "" + (self.text_size) + "px \"" + (self.text_font.$path()) + "\"";
          return self.context.font = font;
        };

        def.$height = function() {
          var self = this;

          return self.canvas.height;
        };

        def['$height='] = function(value) {
          var $a, self = this, font = nil;

          self.height = value;
          if ((($a = value['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.canvas.height = value;
          };
          font = "" + (self.text_size) + "px \"" + (self.text_font.$path()) + "\"";
          return self.context.font = font;
        };

        def.$size = function() {
          var self = this;

          return [self.canvas.width, self.canvas.height];
        };

        def['$size='] = function(value) {
          var $a, self = this, font = nil;

          $a = $opal.to_ary(value), self.width = ($a[0] == null ? nil : $a[0]), self.height = ($a[1] == null ? nil : $a[1]);
          if ((($a = value['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.canvas.width = value['$[]'](0);
            self.canvas.height = value['$[]'](1);
          };
          font = "" + (self.text_size) + "px \"" + (self.text_font.$path()) + "\"";
          return self.context.font = font;
        };

        def.$fill_color = function() {
          var self = this;

          return $scope.get('Color')['$[]'](self.context.fillStyle);
        };

        def['$fill_color='] = function(color) {
          var self = this;

          return self.context.fillStyle = color.$to_hex();
        };

        def.$stroke_color = function() {
          var self = this;

          return $scope.get('Color')['$[]'](self.context.strokeStyle);
        };

        def['$stroke_color='] = function(color) {
          var self = this;

          return self.context.strokeStyle = color.$to_hex();
        };

        def.$stroke_width = function() {
          var self = this;

          return self.context.lineWidth;
        };

        def['$stroke_width='] = function(numeric) {
          var self = this;

          return self.context.lineWidth = numeric;
        };

        def['$text_font='] = function(font) {
          var self = this;

          self.text_font = font;
          font = "" + (self.text_size) + "px \"" + (self.text_font.$path()) + "\"";
          return self.context.font = font;
        };

        def['$text_size='] = function(size) {
          var self = this, font = nil;

          self.text_size = size;
          font = "" + (self.text_size) + "px \"" + (self.text_font.$path()) + "\"";
          return self.context.font = font;
        };

        def.$color_at = function(x, y) {
          var self = this, data = nil;

          data = self.context.getImageData(x, y, 1, 1).data;
          return $scope.get('Color')['$[]'](data[0], data[1], data[2]);
        };

        def.$translate = function(x, y) {
          var $a, $b, self = this;

          ($a = 4, $b = self.transform, $b['$[]=']($a, $rb_plus($b['$[]']($a), self.transform['$[]'](0) * x + self.transform['$[]'](2) * y)));
          ($a = 5, $b = self.transform, $b['$[]=']($a, $rb_plus($b['$[]']($a), self.transform['$[]'](1) * x + self.transform['$[]'](3) * y)));
          
      self.context.setTransform(self.transform['$[]'](0), self.transform['$[]'](1),
                             self.transform['$[]'](2), self.transform['$[]'](3),
                             self.transform['$[]'](4), self.transform['$[]'](5)); ;
        };

        def.$translate_x = function(x) {
          var $a, $b, self = this;

          ($a = 4, $b = self.transform, $b['$[]=']($a, $rb_plus($b['$[]']($a), self.transform['$[]'](0) * x + self.transform['$[]'](2))));
          ($a = 5, $b = self.transform, $b['$[]=']($a, $rb_plus($b['$[]']($a), self.transform['$[]'](1) * x + self.transform['$[]'](3))));
          
      self.context.setTransform(self.transform['$[]'](0), self.transform['$[]'](1),
                             self.transform['$[]'](2), self.transform['$[]'](3),
                             self.transform['$[]'](4), self.transform['$[]'](5)); ;
        };

        def.$translate_y = function(y) {
          var $a, $b, self = this;

          ($a = 4, $b = self.transform, $b['$[]=']($a, $rb_plus($b['$[]']($a), self.transform['$[]'](0) + self.transform['$[]'](2) * y)));
          ($a = 5, $b = self.transform, $b['$[]=']($a, $rb_plus($b['$[]']($a), self.transform['$[]'](1) + self.transform['$[]'](3) * y)));
          
      self.context.setTransform(self.transform['$[]'](0), self.transform['$[]'](1),
                             self.transform['$[]'](2), self.transform['$[]'](3),
                             self.transform['$[]'](4), self.transform['$[]'](5)); ;
        };

        def.$scale = function(x, y) {
          var self = this;

          
      self.transform = [self.transform['$[]'](0) * x,
                       self.transform['$[]'](1) * x,
                       self.transform['$[]'](2) * y,
                       self.transform['$[]'](3) * y,
                       self.transform['$[]'](4), self.transform['$[]'](5)];

      self.context.setTransform(self.transform['$[]'](0), self.transform['$[]'](1),
                             self.transform['$[]'](2), self.transform['$[]'](3),
                             self.transform['$[]'](4), self.transform['$[]'](5)); ;
        };

        def.$scale_x = function(x) {
          var self = this;

          
      self.transform = [self.transform['$[]'](0) * x,
                       self.transform['$[]'](1) * x,
                       self.transform['$[]'](2), self.transform['$[]'](3),
                       self.transform['$[]'](4), self.transform['$[]'](5)];

      self.context.setTransform(self.transform['$[]'](0), self.transform['$[]'](1),
                             self.transform['$[]'](2), self.transform['$[]'](3),
                             self.transform['$[]'](4), self.transform['$[]'](5)); ;
        };

        def.$scale_y = function(y) {
          var self = this;

          
      self.transform = [self.transform['$[]'](0), self.transform['$[]'](1),
                       self.transform['$[]'](2) * y,
                       self.transform['$[]'](3) * y,
                       self.transform['$[]'](4), self.transform['$[]'](5)];

      self.context.setTransform(self.transform['$[]'](0), self.transform['$[]'](1),
                             self.transform['$[]'](2), self.transform['$[]'](3),
                             self.transform['$[]'](4), self.transform['$[]'](5)); ;
        };

        def.$rotate = function(radians) {
          var self = this;

          
      var cos = Math.cos(radians),
          sin = Math.sin(radians),
          e0 = self.transform['$[]'](0) * cos + self.transform['$[]'](2) * sin,
          e1 = self.transform['$[]'](1) * cos + self.transform['$[]'](3) * sin,
          e2 = self.transform['$[]'](0) * -sin + self.transform['$[]'](2) * cos,
          e3 = self.transform['$[]'](1) * -sin + self.transform['$[]'](3) * cos;

      self.transform = [e0, e1, e2, e3, self.transform['$[]'](4), self.transform['$[]'](5)];

      self.context.setTransform(self.transform['$[]'](0), self.transform['$[]'](1),
                             self.transform['$[]'](2), self.transform['$[]'](3),
                             self.transform['$[]'](4), self.transform['$[]'](5)); ;
        };

        def.$push = function() {
          var self = this;

          return self.transforms.$push(self.transform.$dup());
        };

        def.$pop = function() {
          var self = this;

          self.transform = self.transforms.$pop();
          
      self.context.setTransform(self.transform['$[]'](0), self.transform['$[]'](1),
                             self.transform['$[]'](2), self.transform['$[]'](3),
                             self.transform['$[]'](4), self.transform['$[]'](5)); ;
        };

        def.$stroke_line = function(start_x, start_y, end_x, end_y) {
          var self = this;

          
      self.context.beginPath();
      self.context.moveTo(start_x, start_y);
      self.context.lineTo(end_x, end_y);
      self.context.closePath();
      self.context.stroke();
    ;
        };

        def.$stroke_curve = function(start_x, start_y, end_x, end_y, control_x, control_y) {
          var self = this;

          
      self.context.beginPath();
      self.context.moveTo(start_x, start_y);
      self.context.quadraticCurveTo(control_x, control_y,
                                 end_x, end_y);
      self.context.closePath();
      self.context.stroke();
    ;
        };

        def.$stroke_curve = function(start_x, start_y, end_x, end_y, control1_x, control1_y, control2_x, control2_y) {
          var self = this;

          
      self.context.beginPath();
      self.context.moveTo(start_x, start_y);
      self.context.bezierCurveTo(control1_x, control1_y,
                              control2_x, control2_y,
                              end_x, end_y);
      self.context.closePath();
      self.context.stroke();
    ;
        };

        def.$stroke_rectangle = function(x, y, width, height) {
          var self = this;

          return self.context.strokeRect(x, y, width, height);
        };

        def.$fill_rectangle = function(x, y, width, height) {
          var self = this;

          return self.context.fillRect(x, y, width, height);
        };

        def.$stroke_ellipse = function(center_x, center_y, radius_x, radius_y) {
          var self = this;

          
      self.context.beginPath();
      self.context.save();
      self.context.beginPath();
      self.context.translate(center_x - radius_x,
                          center_y - radius_y);
      self.context.scale(radius_x, radius_y);
      self.context.arc(1, 1, 1, 0, 2 * Math.PI, false);
      self.context.restore();
      self.context.stroke();
    ;
        };

        def.$fill_ellipse = function(center_x, center_y, radius_x, radius_y) {
          var self = this;

          
      self.context.beginPath();
      self.context.save();
      self.context.beginPath();
      self.context.translate(center_x - radius_x,
                          center_y - radius_y);
      self.context.scale(radius_x, radius_y);
      self.context.arc(1, 1, 1, 0, 2 * Math.PI, false);
      self.context.restore();
      self.context.fill();
    ;
        };

        def.$clear = function() {
          var self = this;

          return self.context.fillRect(0, 0, self.$width(), self.$height());
        };

        def.$begin_shape = function() {
          var self = this;

          return self.context.beginPath();
        };

        def.$end_shape = function() {
          var self = this;

          return self.context.closePath();
        };

        def.$move_to = function(x, y) {
          var self = this;

          return self.context.moveTo(x, y);
        };

        def.$line_to = function(x, y) {
          var self = this;

          return self.context.lineTo(x, y);
        };

        def.$curve_to = function(x, y, control_x, control_y) {
          var self = this;

          return self.context.quadraticCurveTo(control_x, control_y,
                                x, y);
        };

        def.$curve2_to = function(x, y, control1_x, control1_y, control2_x, control2_y) {
          var self = this;

          return self.context.bezierCurveTo(control1_x, control1_y,
                             control2_x, control2_y,
                             x, y);
        };

        def.$stroke_shape = function() {
          var self = this;

          return self.context.stroke();
        };

        def.$fill_shape = function() {
          var self = this;

          return self.context.fill();
        };

        def.$draw_image = function(image, x, y) {
          var self = this;

          return self.context.drawImage(image.$to_n(), x, y);
        };

        def.$draw_image_cropped = function(image, x, y, crop_x, crop_y, crop_width, crop_height) {
          var self = this;

          return self.context.drawImage(image.$to_n(),
                           crop_x, crop_y,
                           crop_width, crop_height,
                           x, y,
                           crop_x, crop_y);
        };

        def.$fill_text = function(text, x, y) {
          var self = this;

          return self.context.fillText(text, x, y);
        };

        def.$stroke_text = function(text, x, y) {
          var self = this;

          return self.context.strokeText(text, x, y);
        };

        self.$private();

        return (def.$scale_to_window = function() {
          var self = this, font = nil;

          
      var canvas = document.getElementsByTagName('canvas')[0];

      if (self.width['$nil?']() && self.height['$nil?']()) {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        canvas.setAttribute('style', "");
      } else {
        var widthScale = window.innerWidth / canvas.width,
            heightScale = window.innerHeight / canvas.height;
        window.displayScale = Math.min(widthScale, heightScale);

        if (PRESERVE_PIXELS && displayScale >= 1) {
          displayScale = Math.floor(displayScale);
        }

        var width = canvas.width * displayScale,
            height = canvas.height * displayScale,
            sizeStyle = "width:"+width+"px; height:"+height+"px";

        canvas.setAttribute('style', sizeStyle);
      }
    ;
          font = "" + (self.text_size) + "px \"" + (self.text_font.$path()) + "\"";
          return self.context.font = font;
        }, nil) && 'scale_to_window';
      })(self, null)
      
    })(self)
    
  })(self)
};

/* Generated by Opal 0.7.0.beta1 */
Opal.modules["yeah/web/keyboard"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash = $opal.hash, $hash2 = $opal.hash2;

  $opal.add_stubs(['$fetch', '$[]', '$!', '$[]=', '$tick_count', '$==']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Web');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Keyboard(){};
        var self = $Keyboard = $klass($base, $super, 'Keyboard', $Keyboard);

        var def = self.$$proto, $scope = self.$$scope;

        def.pressed_keys = def.ticker = def.released_keys = nil;
        $opal.cdecl($scope, 'KEYS', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "a", "alt", "b", "backquote", "backslash", "backspace", "c", "caps_lock", "comma", "ctrl", "d", "delete", "dot", "down", "e", "end", "enter", "equals", "escape", "f", "f1", "f10", "f11", "f12", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "g", "h", "home", "i", "insert", "j", "k", "l", "left", "left_bracket", "m", "minus", "n", "num0", "num1", "num2", "num3", "num4", "num5", "num6", "num7", "num8", "num9", "num_asterisk", "num_dot", "num_lock", "num_minus", "num_plus", "num_slash", "o", "p", "page_down", "page_up", "pause", "q", "quote", "r", "right", "right_bracket", "s", "scroll_lock", "semicolon", "shift", "slash", "space", "super", "t", "tab", "u", "up", "v", "w", "x", "y", "z"]);

        $opal.cdecl($scope, 'KEY_MAP', $hash(0, "fn", 8, "backspace", 9, "tab", 13, "enter", 16, "shift", 17, "ctrl", 18, "alt", 19, "pause", 20, "caps_lock", 27, "escape", 32, "space", 33, "page_up", 34, "page_down", 35, "end", 36, "home", 37, "left", 38, "up", 39, "right", 40, "down", 45, "insert", 46, "delete", 48, 0, 49, 1, 50, 2, 51, 3, 52, 4, 53, 5, 54, 6, 55, 7, 56, 8, 57, 9, 65, "a", 66, "b", 67, "c", 68, "d", 69, "e", 70, "f", 71, "g", 72, "h", 73, "i", 74, "j", 75, "k", 76, "l", 77, "m", 78, "n", 79, "o", 80, "p", 81, "q", 82, "r", 83, "s", 84, "t", 85, "u", 86, "v", 87, "w", 88, "x", 89, "y", 90, "z", 91, "super", 92, "super", 96, "num0", 97, "num1", 98, "num2", 99, "num3", 100, "num4", 101, "num5", 102, "num6", 103, "num7", 104, "num8", 105, "num9", 106, "num_asterisk", 107, "num_plus", 109, "num_minus", 110, "num_dot", 111, "num_slash", 112, "f1", 113, "f2", 114, "f3", 115, "f4", 116, "f5", 117, "f6", 118, "f7", 119, "f8", 120, "f9", 121, "f10", 122, "f11", 123, "f12", 144, "num_lock", 145, "scroll_lock", 186, "semicolon", 187, "equals", 188, "comma", 189, "minus", 190, "dot", 191, "slash", 192, "backquote", 219, "left_bracket", 220, "backslash", 221, "right_bracket", 222, "quote"));

        def.$initialize = function(options) {
          var self = this, key = nil;

          if (options == null) {
            options = $hash2([], {})
          }
          self.ticker = options.$fetch("ticker");
          self.pressed_keys = $hash2([], {});
          self.released_keys = $hash2([], {});
          
      window.addEventListener('keydown', function(event) {
        key = $scope.get('KEY_MAP')['$[]'](event.keyCode)
        if (self.pressed_keys['$[]'](key)['$!']()) {
          self.pressed_keys['$[]='](key, self.ticker.$tick_count())
        }
      });

      window.addEventListener('keyup', function(event) {
        key = $scope.get('KEY_MAP')['$[]'](event.keyCode)
        self.released_keys['$[]='](key, self.ticker.$tick_count())
        self.pressed_keys['$[]='](key, nil)
      });
    ;
        };

        def['$pressing?'] = function(key) {
          var $a, self = this;

          return ((($a = self.pressed_keys['$[]'](key)['$!']()['$!']()) !== false && $a !== nil) ? $a : false);
        };

        def['$pressed?'] = function(key) {
          var self = this;

          return self.pressed_keys['$[]'](key)['$=='](self.ticker.$tick_count());
        };

        return (def['$released?'] = function(key) {
          var self = this;

          return self.released_keys['$[]'](key)['$=='](self.ticker.$tick_count());
        }, nil) && 'released?';
      })(self, null)
      
    })(self)
    
  })(self)
};

/* Generated by Opal 0.7.0.beta1 */
Opal.modules["yeah/web/mouse"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash = $opal.hash, $hash2 = $opal.hash2;

  $opal.add_stubs(['$attr_reader', '$fetch', '$[]', '$!', '$[]=', '$tick_count', '$==']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Web');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Mouse(){};
        var self = $Mouse = $klass($base, $super, 'Mouse', $Mouse);

        var def = self.$$proto, $scope = self.$$scope;

        def.canvas = def.x = def.y = def.pressed_buttons = def.ticker = def.released_buttons = nil;
        $opal.cdecl($scope, 'BUTTONS', ["left", "middle", "right", 4, 5]);

        $opal.cdecl($scope, 'BUTTON_MAP', $hash(0, "left", 1, "middle", 2, "right", 3, 4, 4, 5));

        self.$attr_reader("x", "y");

        def.$initialize = function(args) {
          var self = this, canvas_selector = nil, button = nil;

          if (args == null) {
            args = $hash2([], {})
          }
          canvas_selector = args.$fetch("canvas_selector", $scope.get('DEFAULT_CANVAS_SELECTOR'));
          self.ticker = args.$fetch("ticker");
          self.canvas = document.querySelectorAll(canvas_selector)[0];
          self.pressed_buttons = $hash2([], {});
          self.released_buttons = $hash2([], {});
          self.x = 0;
          self.y = 0;
          
      if (window['displayScale'] === undefined) {
        window.displayScale = 1;
      }

      self.canvas.addEventListener('mousemove', function(event) {
        if (event.offsetX) {
          self.x = Math.round(event.offsetX / displayScale);
          self.y = Math.round(event.offsetY / displayScale);
        } else {
          self.x = Math.round(event.layerX / displayScale);
          self.y = Math.round(event.layerY / displayScale);
        }
      });

      self.canvas.addEventListener('mousedown', function(event) {
        button = $scope.get('BUTTON_MAP')['$[]'](event.button)
        if (self.pressed_buttons['$[]'](button)['$!']()) {
          self.pressed_buttons['$[]='](button, self.ticker.$tick_count())
        }
      });

      self.canvas.addEventListener('mouseup', function(event) {
        button = $scope.get('BUTTON_MAP')['$[]'](event.button)
        self.released_buttons['$[]='](button, self.ticker.$tick_count())
        self.pressed_buttons['$[]='](button, nil)
      });
    ;
        };

        def['$pressing?'] = function(button) {
          var $a, self = this;

          return ((($a = self.pressed_buttons['$[]'](button)['$!']()['$!']()) !== false && $a !== nil) ? $a : false);
        };

        def['$pressed?'] = function(button) {
          var self = this;

          return self.pressed_buttons['$[]'](button)['$=='](self.ticker.$tick_count());
        };

        def['$released?'] = function(button) {
          var self = this;

          return self.released_buttons['$[]'](button)['$=='](self.ticker.$tick_count());
        };

        return (def.$position = function() {
          var self = this;

          return [self.x, self.y];
        }, nil) && 'position';
      })(self, null)
      
    })(self)
    
  })(self)
};

/* Generated by Opal 0.7.0.beta1 */
Opal.modules["yeah/web/ticker"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$attr_accessor', '$attr_reader', '$fetch']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Web');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Ticker(){};
        var self = $Ticker = $klass($base, $super, 'Ticker', $Ticker);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.rate = def.tick_count = def.next_tps = def.ticks_per_second = nil;
        self.$attr_accessor("rate");

        self.$attr_reader("tick_count", "ticks_per_second");

        def.$initialize = function(args) {
          var self = this;

          if (args == null) {
            args = $hash2([], {})
          }
          self.rate = args.$fetch("rate", $scope.get('DEFAULT_TICKER_RATE'));
          self.tick_count = 0;
          self.ticks_per_second = 0;
          return self.next_tps = 0;
        };

        return (def.$on_tick = TMP_1 = function() {
          var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          
      var lastTime = new Date().getTime(),
          lastMeasureTime = lastTime,
          elapsed = 0,
          interval,
          currentTime;

      var loop = function() {
        interval = 1.0 / self.rate;
        currentTime = new Date().getTime();
        elapsed = (currentTime - lastTime) / 1000.0;

        if (elapsed > interval) {
          // TODO: add to ticks before yielding
          ((($a = $opal.$yield1(block, elapsed)) === $breaker) ? $breaker.$v : $a)

          self.tick_count += 1;
          self.next_tps += 1;

          lastTime = currentTime - (elapsed % interval);
        }

        if (currentTime - lastMeasureTime > 1000) {
          self.ticks_per_second = self.next_tps;
          self.next_tps = 0;

          lastMeasureTime = currentTime - (currentTime - lastMeasureTime) % 1000;
        }

        window.requestAnimationFrame(loop);
      };

      window.requestAnimationFrame(loop);
    ;
        }, nil) && 'on_tick';
      })(self, null)
      
    })(self)
    
  })(self)
};

/* Generated by Opal 0.7.0.beta1 */
(function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice;

  $opal.add_stubs(['$require']);
  self.$require("math");
  self.$require("yeah/web/constants");
  self.$require("yeah/web/class_methods");
  self.$require("yeah/web/asset");
  self.$require("yeah/web/image");
  self.$require("yeah/web/sound");
  self.$require("yeah/web/font");
  self.$require("yeah/web/display");
  self.$require("yeah/web/keyboard");
  self.$require("yeah/web/mouse");
  return self.$require("yeah/web/ticker");
})(Opal);

//# sourceMappingURL=yeah/web.map
;
